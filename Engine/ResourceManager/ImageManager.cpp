#include "Global.h"
#include "ImageManager.h"

//3D画像を管理する
namespace ImageManager
{
	//ロード済みの画像データ一覧
	std::vector<ImageData*>	_datas;

	//uiの描画用
	std::vector<int> _uiDrawDatas;

	//textの描画用
	std::vector<TextData> _textDrawDatas;

	//初期化
	void Initialize()
	{
		AllRelease();
	}

	//画像をロード
	int Load(std::string fileName)
	{
		ImageData* pData = new ImageData;

		//開いたファイル一覧から同じファイル名のものが無いか探す
		bool isExist = false;
		for (int i = 0; i < _datas.size(); i++)
		{
			//すでに開いている場合
			if (_datas[i] != nullptr && _datas[i]->fileName == fileName)
			{
				pData->pSprite = _datas[i]->pSprite;
				isExist = true;
				break;
			}
		}

		//新たにファイルを開く
		if (isExist == false)
		{
			pData->pSprite = new Sprite;
			if (FAILED(pData->pSprite->Load(fileName)))
			{
				//開けなかった
				SAFE_DELETE(pData->pSprite);
				SAFE_DELETE(pData);
				return -1;
			}

			//無事開けた
			pData->fileName = fileName;
		}


		//使ってない番号が無いか探す
		for (int i = 0; i < _datas.size(); i++)
		{
			if (_datas[i] == nullptr)
			{
				_datas[i] = pData;
				return i;
			}
		}

		//新たに追加
		_datas.push_back(pData);

		//画像番号割り振り
		int handle = (int)_datas.size() - 1;

		//切り抜き範囲をリセット
		ResetRect(handle);

		return handle;
	}



	//描画
	void Draw(int handle)
	{
		if (handle < 0 || handle >= _datas.size() || _datas[handle] == nullptr)
		{
			return;
		}
		_datas[handle]->transform->Calclation();
		_datas[handle]->pSprite->Draw(_datas[handle]->transform, _datas[handle]->rect, _datas[handle]->alpha, _datas[handle]->isScreenCapture);
	}

	//Ui描画
	void UiDraw()
	{
		for (auto i = _uiDrawDatas.begin(); i != _uiDrawDatas.end(); i++)
		{
			_datas[(*i)]->transform->Calclation();
			_datas[(*i)]->pSprite->Draw(_datas[(*i)]->transform, _datas[(*i)]->rect, _datas[(*i)]->alpha, _datas[(*i)]->isScreenCapture);
		}

		//空にする	
		_uiDrawDatas.clear();
	}

	//Text描画
	void TextDraw()
	{
		for (auto i = _textDrawDatas.begin(); i != _textDrawDatas.end(); i++)
		{
			(*i).transform->Calclation();
			_datas[(*i).handle]->pSprite->Draw((*i).transform, (*i).rect, _datas[(*i).handle]->alpha, _datas[(*i).handle]->isScreenCapture);
		}

		//空にする	
		_textDrawDatas.clear();
	}


	//任意の画像を開放
	void Release(int handle)
	{
		if (handle < 0 || _datas[handle]->isScreenCapture || handle >= _datas.size())
		{
			return;
		}

		//同じモデルを他でも使っていないか
		bool isExist = false;
		for (int i = 0; i < _datas.size(); i++)
		{
			//すでに開いている場合
			if (_datas[i] != nullptr && i != handle && _datas[i]->pSprite == _datas[handle]->pSprite)
			{
				isExist = true;
				break;
			}
		}

		//使ってなければモデル解放
		if (isExist == false)
		{
			SAFE_DELETE(_datas[handle]->pSprite);
		}

		SAFE_DELETE(_datas[handle]);
	}

	//全ての画像を解放
	void AllRelease()
	{
		for (int i = 0; i < _datas.size(); i++)
		{
			Release(i);
		}
		_datas.clear();
		_uiDrawDatas.clear();
	}

	//UIをセット(最後に描画したいときに使う)
	void SetUi(int handle)
	{
		if (handle < 0 || handle >= _datas.size())
		{
			return;
		}

		_uiDrawDatas.push_back(handle);
	}

	//テキストをセット(最後に描画したいときに使う
	void SetText(int handle, RECT rect, Transform* transform)
	{
		if (handle < 0 || handle >= _datas.size())
		{
			return;
		}

		TextData data;
		data.handle = handle;
		data.rect = rect;
		data.transform = transform;
		_textDrawDatas.push_back(data);
	}


	//切り抜き範囲の設定
	void SetRect(int handle, int x, int y, int width, int height)
	{
		if (handle < 0 || handle >= _datas.size())
		{
			return;
		}

		_datas[handle]->rect.left = x;
		_datas[handle]->rect.top = y;
		_datas[handle]->rect.right = width;
		_datas[handle]->rect.bottom = height;
	}


	//切り抜き範囲をリセット（画像全体を表示する）
	void ResetRect(int handle)
	{
		if (handle < 0 || handle >= _datas.size())
		{
			return;
		}

		XMFLOAT3 size = _datas[handle]->pSprite->GetTextureSize();

		_datas[handle]->rect.left = 0;
		_datas[handle]->rect.top = 0;
		_datas[handle]->rect.right = (long)size.x;
		_datas[handle]->rect.bottom = (long)size.y;

	}

	//アルファ値設定
	void SetAlpha(int handle, float alpha)
	{
		if (handle < 0 || handle >= _datas.size())
		{
			return;
		}
		_datas[handle]->alpha = (float)alpha;
	}

	//アルファ値ゲット
	float GetAlpha(int handle)
	{
		if (handle < 0 || handle >= _datas.size())
		{
			return 0;
		}
		return _datas[handle]->alpha * 255;
	}

	//キャプチャ画面かどうかセット
	void SetScreenCapture(int handle, bool flag)
	{
		if (handle < 0 || handle >= _datas.size())
		{
			return;
		}
		_datas[handle]->isScreenCapture = flag;
	}

	//ワールド行列を設定
	void SetTransform(int handle, Transform* transform)
	{
		if (handle < 0 || handle >= _datas.size())
		{
			return;
		}

		_datas[handle]->transform = transform;
	}


	//ワールド行列の取得
	XMMATRIX GetMatrix(int handle)
	{
		if (handle < 0 || handle >= _datas.size())
		{
			return XMMatrixIdentity();
		}
		return _datas[handle]->transform->GetWorldMatrix();
	}

	//スプライトを取得
	Sprite* GetSprite(int handle)
	{
		if (handle < 0 || handle >= _datas.size())
		{
			return nullptr;
		}
		return _datas[handle]->pSprite;
	}

	//スプライトをセット
	void SetSprite(int handle,Sprite* s)
	{
		_datas[handle]->pSprite = s;
	}
}

